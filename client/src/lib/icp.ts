import { Actor, HttpAgent, Identity } from "@dfinity/agent";
import { Principal } from "@dfinity/principal";

// Will be generated by dfx
declare const canisterId: string;
declare const idlFactory: any;

let agent: HttpAgent | null = null;
let actor: any | null = null;

export async function initializeICP() {
    if (!agent) {
        agent = new HttpAgent({
            host: process.env.NODE_ENV === "development" 
                ? "http://localhost:4943" 
                : "https://ic0.app"
        });

        if (process.env.NODE_ENV === "development") {
            await agent.fetchRootKey();
        }
    }

    if (!actor) {
        actor = Actor.createActor(idlFactory, {
            agent,
            canisterId,
        });
    }

    return actor;
}

export async function submitComplaint(complaintData: {
    title: string;
    description: string;
    category: string;
    location: string;
    latitude: string;
    longitude: string;
    evidenceHash: string;
    privacy: string;
    urgency: string;
    aiAnalysis?: string;
}) {
    const actor = await initializeICP();
    return await actor.submitComplaint(
        complaintData.title,
        complaintData.description,
        complaintData.category,
        complaintData.location,
        complaintData.latitude,
        complaintData.longitude,
        complaintData.evidenceHash,
        complaintData.privacy,
        complaintData.urgency,
        complaintData.aiAnalysis ? [complaintData.aiAnalysis] : []
    );
}

export async function getComplaints() {
    const actor = await initializeICP();
    return await actor.getComplaints();
}

export async function getComplaint(id: number) {
    const actor = await initializeICP();
    return await actor.getComplaint(id);
}

export async function updateComplaintStatus(id: number, status: string) {
    const actor = await initializeICP();
    return await actor.updateComplaintStatus(id, status);
}

export function shortenPrincipal(principal: Principal): string {
    const str = principal.toString();
    return `${str.slice(0, 6)}...${str.slice(-4)}`;
}
